{
  "root": true,
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": "./tsconfig.json" // 指定 tsconfig.json 路径
  },
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "settings": {
    "react": {
      "version": "detect" // 自动检测 React 版本
    },
    "import/resolver": {
      "typescript": {
        "project": "./tsconfig.json"
      }
    }
  },
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended", // TypeScript 推荐规则
    "plugin:react/recommended", // React 推荐规则
    "plugin:react-hooks/recommended", // React Hooks 规则
    "plugin:jsx-a11y/recommended", // 可访问性规则 (Next.js 已包含部分)
    "next/core-web-vitals", // Next.js 核心 Web 指标和基础规则
    "eslint-config-prettier" // Prettier 集成，禁用与 Prettier 冲突的 ESLint 规则
  ],
  "plugins": [
    "@typescript-eslint",
    "react",
    "react-hooks",
    "jsx-a11y",
    "import" // 用于帮助处理模块导入
    // "prettier" // 如果你想通过 ESLint 运行 Prettier (可选, 通常 Prettier 单独运行)
  ],
  "rules": {
    // Prettier 规则 (如果通过 ESLint 运行 Prettier)
    // "prettier/prettier": ["error", {
    //   "semi": true,
    //   "singleQuote": true,
    //   "tabWidth": 2,
    //   "trailingComma": "es5",
    //   "printWidth": 100,
    //   "arrowParens": "always"
    // }],

    // TypeScript 相关规则
    "@typescript-eslint/no-unused-vars": ["error", { "argsIgnorePattern": "^_" }], // 未使用的变量 (忽略以下划线开头的参数)
    "@typescript-eslint/no-explicit-any": "warn", // 警告使用 any 类型，建议明确类型
    "@typescript-eslint/explicit-function-return-type": "off", // 不强制要求函数显式返回类型 (Next.js 中有时会自动推断)
    "@typescript-eslint/no-non-null-assertion": "warn", // 警告使用非空断言 `!`

    // React 相关规则
    "react/react-in-jsx-scope": "off", // Next.js 17+ 不需要显式导入 React
    "react/prop-types": "off", // 使用 TypeScript 后，不再需要 PropTypes
    "react/jsx-uses-react": "off", // 同 react-in-jsx-scope
    "react/jsx-props-no-spreading": "off", // 允许 props 展开 (根据项目偏好调整)
    "react/no-unescaped-entities": "warn", // 警告 JSX 中的未转义字符

    // React Hooks 规则
    "react-hooks/rules-of-hooks": "error", // 检查 Hooks 的规则
    "react-hooks/exhaustive-deps": "warn", // 检查 effect 的依赖项

    // Next.js 特定 (大部分已在 next/core-web-vitals 中)
    // "@next/next/no-html-link-for-pages": "error",

    // 可访问性规则 (jsx-a11y)
    // 大部分重要规则已包含在 plugin:jsx-a11y/recommended 中
    // 可以根据需要调整特定规则，例如：
    // "jsx-a11y/anchor-is-valid": ["error", {
    //   "components": ["Link"],
    //   "specialLink": ["hrefLeft", "hrefRight"],
    //   "aspects": ["invalidHref", "preferButton"]
    // }],
    "jsx-a11y/label-has-associated-control": ["warn", { "depth": 3 }],

    // 代码风格与质量控制 (根据 Canvas 文档)
    "no-console": ["warn", { "allow": ["warn", "error"] }], // 开发时警告 console，允许 console.warn 和 console.error
    "no-debugger": "error", // 禁止 debugger
    "max-lines-per-function": ["warn", { "max": 75, "skipBlankLines": true, "skipComments": true }], // 函数最大行数
    "no-var": "error", // 禁止使用 var
    "prefer-const": "warn", // 优先使用 const

    // Import 排序和规范 (可选, 可以使用 eslint-plugin-import)
    "import/order": [
      "warn",
      {
        "groups": [
          "builtin", // 内置模块
          "external", // 外部模块
          "internal", // 内部模块 (路径别名)
          "parent", // 父级目录
          "sibling", // 同级目录
          "index", // index 文件
          "object", // 对象导入
          "type" // 类型导入
        ],
        "pathGroups": [
          {
            "pattern": "react", // 将 react 相关包放在最前面
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "next/**",
            "group": "external",
            "position": "before"
          },
          {
            "pattern": "@/**", // 匹配路径别名 @/*
            "group": "internal"
          }
        ],
        "pathGroupsExcludedImportTypes": ["react", "next/**"],
        "alphabetize": {
          "order": "asc",
          "caseInsensitive": true
        },
        "newlines-between": "always" // 不同组之间保留空行
      }
    ],
    "import/no-duplicates": "warn", // 禁止重复导入
    "import/no-unresolved": "off", // TypeScript 会处理路径解析，可以关闭
    "import/prefer-default-export": "off" // 不强制默认导出
  },
  "overrides": [
    // 对特定文件类型覆盖规则
    {
      "files": ["*.ts", "*.tsx"],
      "rules": {
        "@typescript-eslint/explicit-module-boundary-types": "off" // 对于 .ts/.tsx 文件，不强制导出函数和类的公共方法的显式返回和参数类型
      }
    },
    {
      "files": ["*.js", "*.jsx"], // 对 JS 文件可以放宽一些 TS 特有的规则
      "rules": {
        "@typescript-eslint/no-var-requires": "off"
      }
    },
    {
      "files": ["*.test.ts", "*.test.tsx", "*.spec.ts", "*.spec.tsx"], // 测试文件
      "env": {
        "jest": true, // 如果使用 Jest
        "node": true
      },
      "rules": {
        "@typescript-eslint/no-explicit-any": "off" // 测试中可能更灵活地使用 any
      }
    }
  ]
}
